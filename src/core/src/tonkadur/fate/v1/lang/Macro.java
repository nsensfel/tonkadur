package tonkadur.fate.v1.lang;

import java.util.ArrayList;
import java.util.List;

import tonkadur.parser.Origin;

import tonkadur.fate.v1.lang.meta.DeclaredEntity;
import tonkadur.fate.v1.lang.meta.Instruction;
import tonkadur.fate.v1.lang.meta.TypedEntryList;
import tonkadur.fate.v1.lang.meta.Computation;

import tonkadur.fate.v1.lang.type.Type;

import tonkadur.fate.v1.lang.instruction.Display;
import tonkadur.fate.v1.lang.instruction.InstructionList;

import tonkadur.fate.v1.lang.computation.Cast;
import tonkadur.fate.v1.lang.computation.ValueToRichText;

public class Macro extends DeclaredEntity
{
   @Override
   public /* static */ String get_type_name ()
   {
      return "Macro";
   }

   /***************************************************************************/
   /**** MEMBERS **************************************************************/
   /***************************************************************************/
   protected final Instruction root;
   protected final TypedEntryList parameters;

   /***************************************************************************/
   /**** PUBLIC ***************************************************************/
   /***************************************************************************/

   /**** Constructors *********************************************************/
   public Macro
   (
      final Origin origin,
      final Instruction root,
      final TypedEntryList parameters,
      final String name
   )
   {
      super(origin, name);

      this.root = root;
      this.parameters = parameters;
   }

   /**** Accessors ************************************************************/
   public TypedEntryList get_parameters ()
   {
      return parameters;
   }

   public Instruction get_root ()
   {
      return root;
   }

   public List<Type> get_signature ()
   {
      final List<Type> result;

      result = new ArrayList<Type>();

      for (final TypedEntryList.TypedEntry entry: parameters.get_entries())
      {
         result.add(entry.get_type());
      }

      return result;
   }

   public Computation get_value_node_representation ()
   {
      final Cast result_cast;
      InstructionList root_as_il;
      Instruction instr;
      Computation result;

      if (!(root instanceof InstructionList))
      {
         return null;
      }

      root_as_il = (InstructionList) root;

      if (root_as_il.get_instructions().size() != 1)
      {
         return null;
      }

      instr = root_as_il.get_instructions().get(0);

      if (!(instr instanceof Display))
      {
         return null;
      }

      result = ((Display) instr).get_content();

      if (!(result instanceof ValueToRichText))
      {
         return result;
      }

      result = ((ValueToRichText) result).get_value();

      if (!(result instanceof Cast))
      {
         return result;
      }

      result_cast = (Cast) result;

      if (result_cast.is_autogenerated())
      {
         return result_cast.get_parent();
      }
      else
      {
         return result;
      }
   }
   /**** Compatibility ********************************************************/

   /*
    * This is for the very special case where a type is used despite not being
    * even a sub-type of the expected one. Using this rather expensive function,
    * the most restrictive shared type will be returned. If no such type exists,
    * the ANY time is returned.
    */
   @Override
   public DeclaredEntity generate_comparable_to (final DeclaredEntity de)
   {
      return null;
   }


   /**** Misc. ****************************************************************/
   @Override
   public boolean is_incompatible_with_declaration (final DeclaredEntity de)
   {
      return true;
   }

   @Override
   public String toString ()
   {
      final StringBuilder sb = new StringBuilder();

      sb.append("(Macro ");
      sb.append(name);
      sb.append(")");

      return sb.toString();
   }

   /***************************************************************************/
   /**** PROTECTED ************************************************************/
   /***************************************************************************/
}
